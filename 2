import math
import heapq

# Define the size of the grid
ROW = 9
COL = 10

# Define the Cell class
class Cell:
    def __init__(self):
        self.parent_i = 0  # Parent cell's row index
        self.parent_j = 0  # Parent cell's column index
        self.f = float('inf')  # Total cost of the cell (f = g + h)
        self.g = float('inf')  # Cost from start to this cell
        self.h = 0             # Heuristic cost from this cell to destination

# Check if a cell is within grid bounds
def is_valid(row, col):
    return 0 <= row < ROW and 0 <= col < COL

# Check if a cell is not blocked
def is_unblocked(grid, row, col):
    return grid[row][col] == 1

# Check if the cell is the destination
def is_destination(row, col, dest):
    return row == dest[0] and col == dest[1]

# Heuristic function: Euclidean distance
def calculate_h_value(row, col, dest):
    return math.sqrt((row - dest[0]) ** 2 + (col - dest[1]) ** 2)

# Trace the path back from destination to source
def trace_path(cell_details, dest):
    print("The Path is:")
    row, col = dest
    path = []

    while not (cell_details[row][col].parent_i == row and cell_details[row][col].parent_j == col):
        path.append((row, col))
        temp_row = cell_details[row][col].parent_i
        temp_col = cell_details[row][col].parent_j
        row, col = temp_row, temp_col

    path.append((row, col))
    path.reverse()

    for i in path:
        print("->", i, end=" ")
    print()

# A* Search algorithm
def a_star_search(grid, src, dest):
    if not is_valid(src[0], src[1]) or not is_valid(dest[0], dest[1]):
        print("Source or destination is invalid")
        return

    if not is_unblocked(grid, src[0], src[1]) or not is_unblocked(grid, dest[0], dest[1]):
        print("Source or the destination is blocked")
        return

    if is_destination(src[0], src[1], dest):
        print("We are already at the destination")
        return

    closed_list = [[False for _ in range(COL)] for _ in range(ROW)]
    cell_details = [[Cell() for _ in range(COL)] for _ in range(ROW)]

    i, j = src
    cell_details[i][j].f = 0.0
    cell_details[i][j].g = 0.0
    cell_details[i][j].h = 0.0
    cell_details[i][j].parent_i = i
    cell_details[i][j].parent_j = j

    open_list = []
    heapq.heappush(open_list, (0.0, i, j))
    found_dest = False

    # All 8 directions (N, S, E, W, NE, NW, SE, SW)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0),
                  (1, 1), (1, -1), (-1, 1), (-1, -1)]

    while open_list:
        f, i, j = heapq.heappop(open_list)
        closed_list[i][j] = True

        for dir in directions:
            new_i, new_j = i + dir[0], j + dir[1]

            if is_valid(new_i, new_j):
                if is_destination(new_i, new_j, dest):
                    cell_details[new_i][new_j].parent_i = i
                    cell_details[new_i][new_j].parent_j = j
                    print("The destination cell is found")
                    trace_path(cell_details, dest)
                    found_dest = True
                    return

                elif is_unblocked(grid, new_i, new_j) and not closed_list[new_i][new_j]:
                    g_new = cell_details[i][j].g + 1.0
                    h_new = calculate_h_value(new_i, new_j, dest)
                    f_new = g_new + h_new

                    if cell_details[new_i][new_j].f == float('inf') or cell_details[new_i][new_j].f > f_new:
                        heapq.heappush(open_list, (f_new, new_i, new_j))
                        cell_details[new_i][new_j].f = f_new
                        cell_details[new_i][new_j].g = g_new
                        cell_details[new_i][new_j].h = h_new
                        cell_details[new_i][new_j].parent_i = i
                        cell_details[new_i][new_j].parent_j = j

    if not found_dest:
        print("Failed to find the destination cell")

# Driver Code
if __name__ == "__main__":
    grid = [
        [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
        [1, 1, 0, 1, 0, 1, 0, 1, 1, 1],
        [1, 0, 1, 1, 1, 1, 1, 0, 1, 0],
        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 1, 1, 1, 0, 1]
    ]

    src = (0, 0)  # Starting point
    dest = (8, 9)  # Destination point

    a_star_search(grid, src, dest)

